<?xml version="1.0" encoding="UTF-8"?>

<language id="pbasic" name="PlatinumSrc BASIC" version="2.0" _section="Source">
  <metadata>
    <property name="mimetypes">text/x-basic</property>
    <property name="globs">*.bas</property>
    <property name="line-comment-start">'</property>
  </metadata>

  <styles>
    <style id="escaped-character" name="Escaped Character" map-to="def:special-char"/>
    <style id="comment" name="Comment" map-to="def:comment"/>
    <style id="preprocessor" name="Preprocessor" map-to="def:preprocessor"/>
    <style id="keyword" name="Keyword" map-to="def:keyword"/>
    <style id="type" name="Data Type" map-to="def:type"/>
    <style id="storage-class" name="Storage Class" map-to="def:type"/>
    <style id="string" name="String" map-to="def:string"/>
    <style id="decimal" name="Decimal number" map-to="def:decimal"/>
    <style id="float" name="Floating point number" map-to="def:floating-point"/>
    <style id="hexadecimal" name="Hexadecimal number" map-to="def:base-n-integer"/>
    <style id="binary" name="Hexadecimal number" map-to="def:base-n-integer"/>
    <style id="boolean" name="Boolean value" map-to="def:boolean"/>
  </styles>

  <default-regex-options case-sensitive="false"/>

  <definitions>

    <define-regex id="escaped-character" extended="true">
      \\([\\\"abefnrtv]|x[0-9a-f][0-9a-f])
    </define-regex>

    <context id="line-comment" style-ref="comment" end-at-line-end="true" class="comment" class-disabled="no-spell-check">
      <start>'</start>
    </context>

    <context id="preprocessor" style-ref="preprocessor" end-at-line-end="true">
      <start extended="true">^\s*\#\s*(if|elif|else|endif)\b</start>
      <include>
          <context ref="def:line-continue"/>
          <context ref="line-comment"/>
      </include>
    </context>

    <context id="keywords" style-ref="keyword">
      <keyword>argc</keyword>
      <keyword>argv</keyword>
      <keyword>as</keyword>
      <keyword>data</keyword>
      <keyword>del</keyword>
      <keyword>delsub</keyword>
      <keyword>dim</keyword>
      <keyword>do</keyword>
      <keyword>elif</keyword>
      <keyword>else</keyword>
      <keyword>exit</keyword>
      <keyword>end</keyword>
      <keyword>for</keyword>
      <keyword>gosub</keyword>
      <keyword>goto</keyword>
      <keyword>if</keyword>
      <keyword>ignore</keyword>
      <keyword>label</keyword>
      <keyword>len</keyword>
      <keyword>on</keyword>
      <keyword>return</keyword>
      <keyword>sleep</keyword>
      <keyword>sub</keyword>
      <keyword>to</keyword>
      <keyword>until</keyword>
      <keyword>while</keyword>
    </context>

    <context id="types" style-ref="type">
      <keyword>void</keyword>
      <keyword>bool</keyword>
      <keyword>i8</keyword>
      <keyword>i16</keyword>
      <keyword>i32</keyword>
      <keyword>i64</keyword>
      <keyword>u8</keyword>
      <keyword>u16</keyword>
      <keyword>u32</keyword>
      <keyword>u64</keyword>
      <keyword>f32</keyword>
      <keyword>f64</keyword>
      <keyword>vec</keyword>
      <keyword>str</keyword>
    </context>

    <context id="storage-class" style-ref="storage-class">
      <keyword>local</keyword>
    </context>

    <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>"</start>
      <end>"</end>
      <include>
        <context id="escaped-character" style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="decimal" style-ref="decimal">
      <match extended="true">
        (?&lt;![\w\.])[0-9]+(?![\w\.])
      </match>
    </context>

    <context id="float" style-ref="float">
      <match extended="true">
        (?&lt;![\w\.])([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)(?![\w\.])
      </match>
    </context>

    <context id="hexadecimal" style-ref="hexadecimal">
      <match extended="true">
        (?&lt;![\w\.])0x[0-9a-f]+(?![\w\.])
      </match>
    </context>

    <context id="binary" style-ref="binary">
      <match extended="true">
        (?&lt;![\w\.])0b[01]+(?![\w\.])
      </match>
    </context>

    <context id="boolean" style-ref="boolean">
      <keyword>false</keyword>
      <keyword>true</keyword>
    </context>

    <context id="pbasic" class="no-spell-check">
      <include>
        <context ref="line-comment"/>
        <context ref="preprocessor"/>
        <context ref="keywords"/>
        <context ref="types"/>
        <context ref="storage-class"/>
        <context ref="string"/>
        <context ref="decimal"/>
        <context ref="float"/>
        <context ref="hexadecimal"/>
        <context ref="binary"/>
        <context ref="boolean"/>
        <context ref="def:line-continue"/>
      </include>
    </context>

  </definitions>

</language>
